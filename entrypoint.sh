#!/bin/sh

set -e

tmpFilePath=changelog.tmp
changelogPath=${INPUT_CHANGELOG_FILE}
urlPrefix=${INPUT_TICKET_URL_PREFIX}
version=${INPUT_VERSION}
fullDate=$(date +"%F")
branchName=${INPUT_BRANCH_NAME}
change_md=""

if [ -z ${version}  ]; then
  echo "Adding changes to Unreleased Section."

  echo "branchName passed in value: ${branchName}"

  if [ -z ${branchName} ]; then
    # This is a workaround for a security fix in git that prevents a user from accessing an untrusted workspace
    git config --global --add safe.directory /github/workspace

    branchName=$(git rev-parse --abbrev-ref HEAD)
  fi
  echo "Using branch name: ${branchName}"

  ticket=$(echo "${branchName}" | awk -F'/' '{print($1)}')
  changeType=$(echo "${branchName}" | awk -F'/' '{print($2)}')
  message=$(echo "${branchName}" | awk -F'/' '{print($3)}' | tr '_' ' ')

  if echo "${changeType}" | grep -Eq '(Added|Changed|Deprecated|Removed|Fixed|Security)'; then
      echo "ChangeType: ${changeType}"
  else
    echo "Invalid ChangeType: ${changeType}"
    exit 1
  fi

  if [ -z "${message}" ]; then
    echo "Could not parse branchName: ${branchName}"
    exit 1
  fi

  ticketLine=""

  if [ -n ${urlPrefix} ]; then
    case "${ticket}" in
      NOJIRA|NoJira|HOTFIX|Hotfix) ;;
      *) ticketLine="- [${ticket}](${urlPrefix}${ticket})"
    esac
  else
    ticketLine="- ${ticket}"
  fi

  # Check if file exists, if not, create blank template.
  if [ -e "${changelogPath}" ]; then
    echo "File exists, appending..."
  else
    echo "# Changelog
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

  This changelog was generated by [action-update-changelog](https://github.com/KrogerWalt/action-update-changelog/).

  ## [Unreleased]

  ## End of Changelog
  " > "$changelogPath"
  fi

  change_md="### ${changeType}
- Merged \"${message}\"
### Referenced Issues
${ticketLine}"

  changeTypeFound="false"
  inUnreleasedSection="false"
  seekingReferencedIssuesSection="false"

  # Read template and insert data to create temp file
  while read data; do
    if [ "${data}" = "## [Unreleased]" ]; then
      echo "Entering Unreleased section..."
      export inUnreleasedSection="true"
      echo "$data" >> "${tmpFilePath}"
    elif [ "${data:0:4}" = "## [" ]; then
      if [ "${inUnreleasedSection}" = "true" ]; then
        echo "Leaving Unreleased section..."
      fi
      export inUnreleasedSection="false"
      echo "$data" >> "${tmpFilePath}"
    elif [ "${inUnreleasedSection}" = "true" ] && [ "${data}" = "### ${changeType}" ]; then
      echo "Adding data to ${changeType} section..."
      export changeTypeFound="true"
      export seekingReferencedIssuesSection="true"
      echo "${data}
- Merged \"${message}\"" >> ${tmpFilePath}
    elif [ "${seekingReferencedIssuesSection}" = "true" ] && [ "${data}" = "### Referenced Issues" ]; then
      export seekingReferencedIssuesSection="false"
      echo "Adding referenced issue..."
      echo "${data}
${ticketLine}" >> "${tmpFilePath}"
    else
      echo "$data" >> "${tmpFilePath}"
    fi
  done < "${changelogPath}"

  # Check to see if change was inserted.
  if [ "${changeTypeFound}" = "false" ]; then
    echo "Did not find a ${changeType} section..."
    rm "${tmpFilePath}"
    while read data; do
      if [ "${data}" = "## [Unreleased]" ]; then
        echo "Adding ${changeType} section to Unreleased..."
        echo "${data}
${change_md}" >> "${tmpFilePath}"
      else
        echo "$data" >> "${tmpFilePath}"
      fi
    done < "${changelogPath}"
  fi
  echo "Modifications complete."
  # End of Unreleased Code Path
else
  echo "Moving Unreleased changes to Version ${version}"
  change_md="## [${version}] - ${fullDate}"
  #Read template and insert data to create temp file
  while read data; do
    if [ "${data}" = "## [Unreleased]" ]; then
      echo "${data}


${change_md}" >> ${tmpFilePath}
    else
      echo "$data" >> ${tmpFilePath}
    fi
  done < "${changelogPath}"
fi

# delete orig and rename temp file.
echo "Replacing original file with temp file."
rm "${changelogPath}"
mv "${tmpFilePath}" "${changelogPath}"

echo "::set-output name=change_md::${change_md}"
